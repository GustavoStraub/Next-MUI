{
    "root": true,
    "parser": "@typescript-eslint/parser",
    "plugins": [
        "@typescript-eslint",
        "import",
        "react",
        "sort-keys-custom-order-fix"
    ],
    "extends": [
        "eslint:recommended",
        "plugin:react/recommended",
        "plugin:@typescript-eslint/eslint-recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:react-hooks/recommended",
        "plugin:prettier/recommended",
        "plugin:react/jsx-runtime",
        "plugin:react/recommended"
    ],
    "env": {
        "browser": true,
        "es2021": true,
        "node": true
    },
    "rules": {
        "prettier/prettier": [
            "error",
            {
                "endOfLine": "auto"
            }
        ],
        // Allow use of console.error.
        "no-console": [
            "warn",
            {
                "allow": [
                    "error"
                ]
            }
        ],
        // Lets typescript checks for it instead.
        "no-unused-vars": "off",
        // Allows of ts-ignores but it should not be overused.
        "@typescript-eslint/ban-ts-comment": "off",
        // Allows use of generic types but should be avoided if possible.
        "@typescript-eslint/ban-types": [
            "error",
            {
                "types": {
                    "Function": false,
                    "Object": false,
                    "{}": false
                }
            }
        ],
        // Lets Typescript to infer return types.
        "@typescript-eslint/explicit-module-boundary-types": "off",
        // Sets custom ordering for interfaces and classes.
        "@typescript-eslint/member-ordering": [
            "error",
            {
                "classes": [
                    "field",
                    "constructor",
                    "method"
                ],
                "default": {
                    "order": "alphabetically-case-insensitive"
                }
            }
        ],
        // Allows use of empty function mainly used for tests.
        "@typescript-eslint/no-empty-function": 1,
        // Allows use of any but should be avoided if possible.
        "@typescript-eslint/no-explicit-any": "off",
        // Allows use of "!" to indicate that a value is not null/undefined.
        "@typescript-eslint/no-non-null-assertion": "off",
        // Allows use of "!" after optional chaining e.g. foo?.bar!.
        "@typescript-eslint/no-non-null-asserted-optional-chain": "off",
        // Checks if a variable is declared but not used.
        "@typescript-eslint/no-unused-vars": [
            "error",
            {
                "ignoreRestSiblings": true
            }
        ],
        // Allows using media without needing captions.
        "jsx-a11y/media-has-caption": "off",
        // Avoids needing to specific display names for components.
        "react/display-name": "off",
        // Forces component props to be sorted, rest props are ignored.
        "react/jsx-sort-props": [
            "error",
            {
                "ignoreCase": true
            }
        ],
        // Used to sort members inside an import. Will ignore "type" keyword e.g. import { type A, b } from "components".
        "sort-imports": [
            "error",
            {
                "allowSeparatedGroups": true,
                "ignoreCase": true,
                "ignoreDeclarationSort": true,
                "ignoreMemberSort": false
            }
        ],
        // Forces object keys to be sorted, rest props are ignored (similar to 'sort-keys').
        "sort-keys": "off",
        "sort-keys-custom-order-fix/sort-keys-custom-order-fix": [
            "error",
            "custom",
            {
                "caseSensitive": false,
                "natural": true,
                "orderBy": "asc",
                "order": [
                    "xs",
                    "sm",
                    "md",
                    "lg",
                    "xl"
                ]
            }
        ],
        // Allow use of various characters like ">", """, "'", "}", etc.
        "react/no-unescaped-entities": "off",
        // We use prop interface to specify props.
        "react/prop-types": "off",
        // We use jsx transform (no need for import React).
        "react/react-in-jsx-scope": "off"
    },
    "settings": {
        // Lets import plugin know about non-relative imports
        "import/resolver": {
            "typescript": {
                "project": "./tsconfig.json"
            }
        },
        "react": {
            "version": "detect"
        }
    }
}